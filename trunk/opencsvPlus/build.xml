<?xml version="1.0" encoding="UTF-8"?>
<project name="project" default="java">
	<property file="build.win.properties" />

	<!-- クラスパス名の定義 -->
	<path id="my.class.path">
		<pathelement path="${java.class.path}" />
		<pathelement path="${class.dir}" />
		<pathelement path="${jar.dir}" />
		<fileset dir="${jar.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="cobertura.classpath">
	<fileset dir="${jar.dir}">
		<include name="**/*.jar" />
	</fileset>
	<fileset dir="." >
		<include name="cobertura.jar" />
	</fileset>
	</path>
	<!-- クラスパス名の定義 以上 -->
	
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />


	<target name="clean">
		<delete dir="${javadoc.dir}" />
		<delete dir="${class.dir}" />
		<delete dir="${reports.dir}" />
		<delete dir="${correctreports.dir}" />
		<delete file="${jar.dir}/${jar.name}" />
	</target>
	
	<target name="javac">
		<mkdir dir="${class.dir}" />
		<javac srcdir="${src.dir}" destdir="${class.dir}" encoding="${compile.encoding}" includeantruntime="no" memoryInitialSize="256M" fork="yes" memoryMaximumSize="256M" includes="**" debug="true">
			<classpath refid="my.class.path" />
		</javac>
		
		<copy todir="${class.dir}" preservelastmodified="yes">
		<fileset dir="${src.dir}">
		<include name="**" />
		<exclude name="**/**.java" />
		</fileset>
		</copy>
	</target>
	
	<target name="jar" depends="javac">
		<jar destfile="${jar.dir}/${jar.name}" basedir="${class.dir}"  includes="au/com/bytecode/**/**.class" />
	</target>
	
	<!-- ドキュメント作成関連 -->
	<!-- JavaDocの作成 -->
	<target name="javadoc" depends="javac" description="Javadocドキュメントを作成する">
		<delete dir="${javadoc.dir}" />
		<mkdir dir="${javadoc.dir}" />
		<javadoc locale="ja" destdir="${javadoc.dir}" sourcepath="${src.dir}" packagenames="*" encoding="${compile.encoding}" Package="true" author="true" version="true" use="true" windowtitle="${ant.project.name} Document" maxmemory="256M">
			<!--<link href="${j2se.javadoc}" packagelistLoc="package-list/j2se" offline="true" />
			<link href="${j2ee.javadoc}" packagelistLoc="package-list/j2ee" offline="true" />
			-->
			<classpath refid="my.class.path" />
		</javadoc>
	</target>
<!--
	<target name="j2h" depends="init" description="Java2htmlドキュメントを作成する">
		<delete dir="${j2h.dir}" />
		<mkdir dir="${j2h.dir}" />
		<java2html destination="${j2h.dir}" tabsize="2" marginsize="4" header="true" footer="true" title="${ant.project.name} Source Document">
			<fileset dir="${src.dir}">
				<include name="eaurora/**/*.java" />
			</fileset>-->
			<!-- あるディレクトリにhttpのリンクをはる -->
			<!-- 
			<javadoc localRef="${j2se.local.javadoc}" httpRef="${j2se.javadoc}" />
			<javadoc localRef="${j2ee.local.javadoc}" httpRef="${j2ee.javadoc}" />
		</java2html>
	</target>
-->	
	
	<target name="test.javac" depends="javac">
		<mkdir dir="${class.dir}" />
		<javac srcdir="${test.src.dir}" destdir="${class.dir}" encoding="${compile.encoding}" includeantruntime="no" memoryInitialSize="256M" fork="yes" memoryMaximumSize="256M" includes="**">
			<classpath refid="my.class.path" />
		</javac>
		<copy todir="${class.dir}" preservelastmodified="yes">
		<fileset dir="${test.src.dir}">
		<include name="**" />
		<exclude name="**/**.java" />
		</fileset>
		</copy>
	</target>


	<target name="instrument" depends="javac">
		<!--
			Remove the coverage data file and any old instrumentation.
		-->
		<delete file="cobertura.ser"/>
		<delete dir="${instrumented.dir}" />

		<!--
			Instrument the application classes, writing the
			instrumented classes into ${build.instrumented.dir}.
		-->
		<cobertura-instrument todir="${instrumented.dir}">
			<!--
				The following line causes instrument to ignore any
				source line containing a reference to log4j, for the
				purposes of coverage reporting.
			-->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="${class.dir}">
				<!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>
	</target>



	<!-- 以下、UnitTest用タスク -->
	<!-- JUnitタスクでは，ユニットテストを自動実行して，その結果をファイルに記録します.
		haltonfailure属性をnoに指定しておかないと，ユニットテストに失敗したときに，
		ビルド作業も中断してしまいます．
		JUnitReportタスクで，レポートの集計を行いたいので，失敗しても，
		そのままテストを続けるように，指定します．
	-->
	<target name="junit" depends="test.javac" description="JUnitを実行します。">
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${correctreports.dir}" />
		<junit printsummary="yes" haltonfailure="no" fork="yes" >
			<classpath location="${instrumented.dir}" />
			<classpath>
				<pathelement location="${class.dir}" />
				<pathelement path="${java.class.path}" />
				<pathelement path="${my.class.path}" />
			</classpath>
			<classpath refid="my.class.path" />
			<classpath refid="cobertura.classpath" />

			<!--
				テスト結果は，XML形式で出力します．
				プレーンテキストでも出力できますが，集計にJUnitReportが使えなくなっ
				てしまいます．
				xml or plain で指定します。
			-->
			<formatter type="xml" />

			<!--
				reports.dirについては，Propertyタスクで定義済みと考えて置いてください．
				ビルドファイル全体は，後述します．
				reports.dirディレクトリに，テスト結果が出力されます．
				テスト結果のファイル名は，何も指定しないデフォルトで，"TEST-*.xml"と
				いった名前になります.
			-->
			<batchtest fork="yes" todir="${reports.dir}">

				<!--
					ここでは，拡張子を除いたファイル名の末尾が"Test"となっている
					テストファイルを対象としています．
				-->
				<fileset dir="${test.src.dir}">
					<include name="**/*Test*.java" />
					<!--					<include name="bean/AllTests.java"/> -->
				</fileset>
			</batchtest>
		</junit>


		<!--
			JUnitReportタスクでは，JUnitタスクで出力された,テスト結果（XML形式のもの）を集計します.
		-->
		<junitreport todir="${reports.dir}">
			<!--
				集計対象とする，テスト結果のfilesetを指定します．
			-->
			<fileset dir="${reports.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<!--
				集計結果のHTMLファイル群を格納するディレクトリを指定します．
			-->
			<report format="frames" todir="${correctreports.dir}" />
		</junitreport>

		<!--
			Generate an XML file containing the coverage data using
			the "srcdir" attribute.
		-->
		<cobertura-report srcdir="${src.dir}" destdir="${coverage.reports.dir}" format="html" />
	</target>
	<!-- 以上、UnitTest用タスク -->
</project>

